## A brief overview ##
The dux kernel is called "*metodo*" an Italian word that means *method*.

Metodo is the kernel used by [dux](/dux), with similar goals to dux itself &mdash; including to have a simple overall design, be easy to port to new architectures, and easy to create new software for.
Although metodo is designed to be easily portable to different architectures, it only runs on [x86](http://en.wikipedia.org/wiki/x86) systems at the moment.

## History ##
Dux and it's original kernel were strongly tied.  On August 2nd, 2009, after deciding that this was a poor design idea, we [started development of the metodo kernel](http://github.com/RockerMONO/dux/commit/cbc463921ae3a5e34e24257445854575b0d4e2f6).
The metodo kernel was heavily developed at a surprisingly fast pace, until it was on-par with dux's original kernel.
On August 23rd, 2009, [the old dux kernel was removed](http://github.com/RockerMONO/dux/commit/af570ca0b1ae29c407c729cdbaae4f98a6bb1a55), and metodo officially replaced it.

## Design ##

It is a monolithic kernel, or at least right now.

My plans for access levels are that there will be 4 levels of access, they are:
- [Kernel](#kernel_access)
- [Kernel drivers](#kernel_drivers)
- [User drivers](#user_drivers)
- [Userland](#userland)

### Kernel access ###
Highest access level.
Complete hardware access and the ability to do whatever you can imagine (and possibly more).

### Kernel drivers ###
Second-highest access level.
Less access than the kernel, but enough to implement the “hardcore” drivers (graphics and whatnot) well.

### User drivers ###
Third-highest access level.
Basically userland access, but a few more syscalls.

### Userland ###
Lowest access level.
Where any untrusted (to the kernel) software runs at – all user programs.
